"""
Jenkins Configuration as Code (JCasC) enhancement module.
This module enhances exported JCasC configurations for Docker migration.
"""
import sys
import os
import argparse
from datetime import datetime

import yaml

def enhance_jcasc(input_file):
    """
    Enhance exported JCasC configuration for Docker migration.
    
    Args:
        input_file (str): Path to the exported JCasC configuration file
        
    Returns:
        dict: Enhanced configuration dictionary
    """
    try:
        # Load exported configuration
        with open(input_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f) or {}

        # Ensure we have the main sections
        if 'jenkins' not in config:
            config['jenkins'] = {}
        if 'security' not in config:
            config['security'] = {}
        if 'unclassified' not in config:
            config['unclassified'] = {}
        if 'tool' not in config:
            config['tool'] = {}

        # Get migration variables from environment
        migration_timestamp = os.environ.get('MIGRATION_TIMESTAMP',
                                              datetime.now().isoformat())
        migration_id = os.environ.get('MIGRATION_ID',
                                      'mig_' + datetime.now().strftime('%Y%m%d_%H%M%S'))

        # Preserve existing system message if it exists, otherwise don't add migration message
        # User doesn't want migration messages in the Jenkins UI
        if 'systemMessage' not in config['jenkins'] or not config['jenkins']['systemMessage']:
            # Only set if there was no existing system message
            pass  # Don't set any migration system message

        # Preserve agent port setting
        if 'slaveAgentPort' not in config['jenkins']:
            config['jenkins']['slaveAgentPort'] = '${JENKINS_AGENT_PORT}'

        # Ensure CSRF protection is properly configured
        if 'security' not in config or not config['security']:
            config['security'] = {}

        # Use correct CSRF crumb issuer configuration
        # Handles the transition from 'crumbIssuer' to 'crumb' gracefully
        if 'crumb' not in config['security']:
            if 'crumbIssuer' in config['security']:
                # If the old key exists, move its value to the new key
                config['security']['crumb'] = config['security']['crumbIssuer']
                del config['security']['crumbIssuer']
            else:
                # If neither key exists, configure the default CSRF issuer
                config['security']['crumb'] = {
                    'issuer': {
                        'default': {}
                    }
                }

        # Remove any invalid attributes we've seen
        if 'installState' in config['jenkins']:
            del config['jenkins']['installState']

        # Ensure location configuration is present, preserving existing values
        if 'location' not in config.get('unclassified', {}):
            # If no location is configured at all, create a default one.
            config['unclassified']['location'] = {
                'adminAddress': 'jenkins@localhost',
                'url': '${JENKINS_URL:-http://localhost:8080}'
            }
        else:
            # If location is configured, ensure adminAddress is set if it's missing or empty
            if not config['unclassified']['location'].get('adminAddress'):
                config['unclassified']['location']['adminAddress'] = 'jenkins@localhost'
            # Ensure url is set if it's missing or empty
            if not config['unclassified']['location'].get('url'):
                config['unclassified']['location']['url'] = '${JENKINS_URL:-http://localhost:8080}'

        # Remove deprecated AdminWhitelistRule configuration that causes stack traces
        if 'security' in config and config['security']:
            # Remove AdminWhitelistRule and its variants
            deprecated_keys = ['adminWhitelistRule', 'AdminWhitelistRule',
                               'slaveToMasterAccessControl']
            for key in deprecated_keys:
                if key in config['security']:
                    del config['security'][key]

        # Add validation header with actual values
        header = f"""---
# Jenkins Configuration as Code (JCasC)
# Generated by Jenkins Migration Tool on {migration_timestamp}
# Migration ID: {migration_id}
#
# VALIDATION NOTES:
# - Generated from live Jenkins instance schema
# - Automatically excludes invalid attributes
# - Enhanced with migration-specific settings
# - Deprecated AdminWhitelistRule configurations removed

"""

        # Output enhanced configuration
        print(header, end='')
        yaml.dump(config, sys.stdout, default_flow_style=False, sort_keys=False)

    except Exception as e:
        print(f"# ERROR: Failed to enhance JCasC configuration: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Enhance JCasC configuration.')
    parser.add_argument('input_file', type=str, help='Path to the exported JCasC file.')
    args = parser.parse_args()

    enhance_jcasc(args.input_file)
